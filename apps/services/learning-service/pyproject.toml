[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "learning-service"
version = "1.0.0"
description = "ML-powered optimization and learning services for electrical systems"
authors = ["Wessley.ai Team <team@wessley.ai>"]
license = "MIT"
readme = "README.md"
homepage = "https://wessley.ai"
repository = "https://github.com/wessley-ai/learning-service"
documentation = "https://docs.wessley.ai/learning-service"
keywords = ["machine-learning", "optimization", "electrical-systems", "3d-modeling"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
torch = "^2.0.0"
torchvision = "^0.15.0"
numpy = "^1.21.0"
pandas = "^1.5.0"
scikit-learn = "^1.3.0"
scipy = "^1.10.0"
opencv-python = "^4.8.0"
Pillow = "^9.5.0"
scikit-image = "^0.20.0"
gym = "^0.26.0"
stable-baselines3 = "^2.0.0"
tensorboard = "^2.13.0"
fastapi = "^0.100.0"
uvicorn = {extras = ["standard"], version = "^0.22.0"}
pydantic = "^2.0.0"
httpx = "^0.24.0"
grpcio = "^1.56.0"
grpcio-tools = "^1.56.0"
protobuf = "^4.23.0"
mlflow = "^2.5.0"
ray = {extras = ["default", "tune", "rllib"], version = "^2.6.0"}
sqlalchemy = "^2.0.0"
psycopg2-binary = "^2.9.0"
redis = "^4.6.0"
networkx = "^3.1.0"
matplotlib = "^3.7.0"
seaborn = "^0.12.0"
plotly = "^5.15.0"
pyyaml = "^6.0"
python-dotenv = "^1.0.0"
click = "^8.1.0"
tqdm = "^4.65.0"
loguru = "^0.7.0"
prometheus-client = "^0.17.0"
structlog = "^23.1.0"
aiofiles = "^23.1.0"
aioredis = "^2.0.0"
xgboost = "^1.7.0"
lightgbm = "^4.0.0"
trimesh = "^3.22.0"
shapely = "^2.0.0"
joblib = "^1.3.0"
psutil = "^5.9.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^23.7.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
pre-commit = "^3.3.0"
isort = "^5.12.0"
bandit = "^1.7.0"
safety = "^2.3.0"

[tool.poetry.group.optional.dependencies]
albumentations = "^1.3.0"
cvxpy = "^1.3.0"
open3d = "^0.17.0"
catboost = "^1.2.0"
memory-profiler = "^0.60.0"

[tool.poetry.scripts]
learning-service = "src.main:main"
train-model = "src.cli.train:main"
optimize-layout = "src.cli.optimize:main"

[tool.black]
line-length = 100
target-version = ['py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src"]
known_third_party = ["torch", "numpy", "pandas", "sklearn", "fastapi", "mlflow", "ray"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "sklearn.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "trimesh.*",
    "open3d.*",
    "ray.*",
    "mlflow.*",
    "gym.*",
    "stable_baselines3.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_subprocess

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "test_*.py:S101",    # use of assert
]